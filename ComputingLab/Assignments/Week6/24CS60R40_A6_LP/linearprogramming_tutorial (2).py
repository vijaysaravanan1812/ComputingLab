# -*- coding: utf-8 -*-
"""LinearProgramming_tutorial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q7KLI9iPYkoEcfUyZNHbyVWY3knf9mnS

# Linear Programming
## We will use Google OR-Tools, a powerful open-source suite for optimization, to solve a linear programming (LP) problem. OR-Tools provides efficient solvers and a flexible API for defining variables, constraints, and objective functions, making it ideal for optimizing decision-making processes in various applications.

#Maximize 3x+4y subject to the following constraints


*   x+2y<=14
*   3x-y>=0
*   x-y<=2

To solve this system , we will be using Google-OR tools [Documentation](https://developers.google.com/optimization) .

[Explore the package](https://developers.google.com/optimization/introduction/python)

# 1. Installing the package
You will need to use the pywraplp module from the ortools package. For that install the ortools package. Refer the [installation guidelines](https://developers.google.com/optimization/install)
"""

!pip install ortools

"""# 2. Import the required libraries
We need to import the pywraplp module from the ortools.linear_solver package.
"""

from ortools.linear_solver import pywraplp

"""# 3. Declare the solver
We need to create a solver variable that will contain all the necessary items to solve the problem.
For linear programming problems, we will be mostly using the "GLOP" solver.


"""

solver = pywraplp.Solver.CreateSolver("GLOP")
if not solver:
    print("Solver not found")

"""## GLOP Solver - Linear Programming (LP) solver.

- Variable Compatibility: Works with NumVar (continuous variables).

- Use Case: GLOP is used for solving linear programming problems where all decision variables are continuous (i.e., they can take any real value).

## SCIP Solver - Mixed-Integer Programming (MIP) solver.

- Works with both NumVar (continuous) and IntVar (integer variables).
 include both continuous and integer variables. It can also handle purely integer programming problems or purely linear problems.

# 4. Create the variables
We need to create the variable(s) by calling the NumVar()/IntVar() method of the solver object and passing in the lower and upper bounds for the variable(s), as well as a name for the variable(s).




Also note


*   NumVar - gives a continous variable . It can take any real number within a specified range. This is common in linear programming (LP) or continuous optimization problems.
*   IntVar - gives a Integer variable. It Can only take integer values within a specified range. This is common in integer programming (IP) or mixed-integer programming (MIP) problems.
"""

x = solver.NumVar(0, solver.infinity(), "x")
y = solver.NumVar(0, solver.infinity(), "y")
print("Number of variables =", solver.NumVariables())

"""# 5. Define the constraints
We need to define the constraints ,we will call the ```Add()``` method of the solver object and passing in a linear expression that represents the constraint.
"""

# Constraint 1: x + 2y <= 14.
solver.Add(x + 2 * y <= 14.0)

# Constraint 2: 3x - y >= 0.
solver.Add(3 * x - y >= 0.0)

# Constraint 3: x - y <= 2.
solver.Add(x - y <= 2.0)

print("Number of constraints =", solver.NumConstraints())

"""Alternatively we can do this by calling the ```Constraint()``` and ```SetCoefficient()``` method of the solver object that represents the constraint.


*Uncomment the below lines to test yourself*
"""

# # Create the constraint: x + 2y <= 14
# ct = solver.Constraint(-solver.infinity(), 14.0,"ct")

# # Set the coefficients for x and y in the constraint
# ct.SetCoefficient(x, 1)  # Coefficient of x is 1
# ct.SetCoefficient(y, 2)  # Coefficient of y is 2

"""# 6. Define the objective function
Now for optimization , call either the ```Maximize()``` or ```Minimize()``` method of the solver object, depending on whether you want to maximize or minimize the objective function, and passing in a linear expression that represents the objective function.

"""

solver.Maximize(3 * x + 4 * y)

"""Alternative way to do the same

*Uncomment the below lines to test yourself*
"""

# objective = solver.Objective()
# objective.SetCoefficient(x, 3)
# objective.SetCoefficient(y, 4)
# objective.SetMaximization()

"""# 7. Invoke the solver

After defining all of the necessary components of your problem, we can solve it by calling the ```solve()``` method of the solver object.

"""

result_status = solver.Solve()
print(f"Status: {result_status}")
if result_status != pywraplp.Solver.OPTIMAL:
    print("The problem does not have an optimal solution!")
    # you can print the solutions here.
    if result_status == pywraplp.Solver.FEASIBLE:
        print("A potentially suboptimal solution was found")
    else:
        print("The solver could not solve the problem.")

"""# 8. Display the solution
Finally, we can display the solution to your problem by accessing the values of your variables using their ```solution_value()``` attribute for the variables.

"""

if result_status == pywraplp.Solver.OPTIMAL:
    print(f"Objective value = {solver.Objective().Value():0.1f}")
    print(f"x = {x.solution_value():0.1f}")
    print(f"y = {y.solution_value():0.1f}")

else:
    print("The problem does not have an optimal solution.")

